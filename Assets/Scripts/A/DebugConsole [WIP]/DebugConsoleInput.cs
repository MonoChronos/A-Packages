//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/A/DebugConsole [WIP]/DebugConsoleInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace A.DebugConsole
{
    public partial class @ADebugConsoleInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ADebugConsoleInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""DebugConsoleInput"",
    ""maps"": [
        {
            ""name"": ""Console"",
            ""id"": ""50d5d74d-45b5-4a29-90f5-6410adc8753e"",
            ""actions"": [
                {
                    ""name"": ""OpenClose"",
                    ""type"": ""Button"",
                    ""id"": ""d05a9f94-0748-47d2-88b5-3e2ba23286dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Execute"",
                    ""type"": ""Button"",
                    ""id"": ""c508f475-6cb4-47e5-82b2-fc47c0cdf766"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7951f23b-1d8a-4bad-8033-fb3eefdfd40a"",
                    ""path"": ""<Keyboard>/slash"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenClose"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9c6389e-b65d-4df5-8708-0ea0b3442d5b"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Execute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Console
            m_Console = asset.FindActionMap("Console", throwIfNotFound: true);
            m_Console_OpenClose = m_Console.FindAction("OpenClose", throwIfNotFound: true);
            m_Console_Execute = m_Console.FindAction("Execute", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Console
        private readonly InputActionMap m_Console;
        private IConsoleActions m_ConsoleActionsCallbackInterface;
        private readonly InputAction m_Console_OpenClose;
        private readonly InputAction m_Console_Execute;
        public struct ConsoleActions
        {
            private @ADebugConsoleInput m_Wrapper;
            public ConsoleActions(@ADebugConsoleInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @OpenClose => m_Wrapper.m_Console_OpenClose;
            public InputAction @Execute => m_Wrapper.m_Console_Execute;
            public InputActionMap Get() { return m_Wrapper.m_Console; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ConsoleActions set) { return set.Get(); }
            public void SetCallbacks(IConsoleActions instance)
            {
                if (m_Wrapper.m_ConsoleActionsCallbackInterface != null)
                {
                    @OpenClose.started -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnOpenClose;
                    @OpenClose.performed -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnOpenClose;
                    @OpenClose.canceled -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnOpenClose;
                    @Execute.started -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnExecute;
                    @Execute.performed -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnExecute;
                    @Execute.canceled -= m_Wrapper.m_ConsoleActionsCallbackInterface.OnExecute;
                }
                m_Wrapper.m_ConsoleActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @OpenClose.started += instance.OnOpenClose;
                    @OpenClose.performed += instance.OnOpenClose;
                    @OpenClose.canceled += instance.OnOpenClose;
                    @Execute.started += instance.OnExecute;
                    @Execute.performed += instance.OnExecute;
                    @Execute.canceled += instance.OnExecute;
                }
            }
        }
        public ConsoleActions @Console => new ConsoleActions(this);
        public interface IConsoleActions
        {
            void OnOpenClose(InputAction.CallbackContext context);
            void OnExecute(InputAction.CallbackContext context);
        }
    }
}
